generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//

enum Role {
  MANAGER
  ATTENDANT
  KITCHEN
}

enum TableStatus {
  FREE
  OCCUPIED
  RESERVED
  BLOCKED
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  CANCELED
}


//
// USERS & AUTHENTICATION
//

model Employee {
  id              Int           @id @default(autoincrement())
  name            String
  email           String        @unique
  passwordHash    String
  role            Role
  shift           String
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  ordersOpened    Order[]       @relation("OrdersOpened")
  ordersClosed    Order[]       @relation("OrdersClosed")
}

//
// TABLES & RESERVATIONS
//

model Table {
  id          Int          @id @default(autoincrement())
  number      Int          @unique
  seats       Int
  status      TableStatus  @default(FREE)
  orders      Order[]
  reservations Reservation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Reservation {
  id        Int      @id @default(autoincrement())
  tableId   Int
  table     Table    @relation(fields: [tableId], references: [id])
  customerName String
  phone     String
  reservedFor DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// MENU
//

model Category {
  id     Int           @id @default(autoincrement())
  name   String        @unique
  items  MenuItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  isActive      Boolean        @default(true)
  categoryId    Int?
  category      Category?      @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// ORDERS & PAYMENTS
//

model Order {
  id             Int           @id @default(autoincrement())
  tableId        Int?
  table          Table?        @relation(fields: [tableId], references: [id])
  customerName   String?
  status         String        @default("OPEN")
  openedAt       DateTime      @default(now())
  closedAt       DateTime?
  openedById     Int?
  closedById     Int?
  openedBy       Employee?     @relation("OrdersOpened", fields: [openedById], references: [id])
  closedBy       Employee?     @relation("OrdersClosed", fields: [closedById], references: [id])
  items          OrderItem[]
  payments       Payment[]
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id             Int        @id @default(autoincrement())
  orderId        Int
  order          Order      @relation(fields: [orderId], references: [id])
  menuItemId     Int
  menuItem       MenuItem   @relation(fields: [menuItemId], references: [id])
  quantity       Int        @default(1)
  unitPrice      Float
  notes          String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  method    String
  amount    Float
  paidAt    DateTime @default(now())
  change    Float?
  payingAt  DateTime 

}
